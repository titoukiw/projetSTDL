----------------------------------------------- -*- text -*-
-- Langage MiniJava : Sous-ensemble du langage Java pour le projet STL 2016-2017
-- Sémantique : Construction de l'arbre abstrait
--                      Gestion de la table des symboles
--                      Typage
--                      Calcul des déplacements (Allocation mémoire)
--                      Génération de code TAM
-----------------------------------------------
option auto= true;
option version = 0.0.1 ;
option k=2;

inh gauche		: Expression for SuiteParametresGenericite, SuiteArgumentsGenericite;
inh factory		: BlockFactory for Type, Genericite, HeritageClasse, SuiteParametresGenericite, ImplantationInterface, ParametresGenericite, TypeAtomique, SuiteTypeAtomique,ParametreGenericite, Interfaces, Interface, HeritageInterface, SuiteHeritageInterface, ElementsInterface,ElementInterface, Signature, Classes, Classe, ElementsClasse, ElementClasse, AttributOuMethode, SuiteAttributOuMethode, Constructeur, Principale, MethodePrincipale, Bloc, Instructions, Instruction, Expression, SuiteExpressions, SuiteConditionnelle, Affectation, SuiteAffectation,Condition, SuiteCondition, Terme, SuiteTerme, Facteur, SuiteFacteur ;

inh tds     	: SymbolTable for Expressions, ArgumentGenericite, Programme, ParametreGenericite, Interfaces, Interface, HeritageInterface, SuiteHeritageInterface, ElementsInterface, ElementInterface, Signature, Classes, Classe, HeritageClasse, ImplantationInterface, Principale, MethodePrincipale,Genericite, ParametresGenericite, SuiteParametresGenericite, HeritageGenericite, SuiteHeritageGenericite, InstanceGenericite, ArgumentsGenericite, SuiteArgumentsGenericite, ElementClasse, ElementsClasse, Constructeur, AttributOuMethode, SuiteAttributOuMethode, Type, TypeAtomique, Parametres, Parametre, SuiteParametres, Bloc, Instructions, Instruction, Expression, SuiteExpressions, SuiteConditionnelle, Affectation, SuiteAffectation, Condition, SuiteCondition, Terme, SuiteTerme, Facteur, SuiteFacteur, SuiteNouveau, Arguments, AppelOuAcces, Appel, Acces  ;

--inh tdsAttMet		: SymbolTable for ElementClasse, ElementsClasse, AttributOuMethode, SuiteAttributOuMethode, MethodePrincipale, Constructeur, Type, TypeAtomique, Parametres, Parametre, SuiteParametres, Bloc, Instructions, Instruction, Expression, SuiteExpressions, SuiteConditionnelle, Affectation, SuiteAffectation, Condition, SuiteCondition, Terme, SuiteTerme, Facteur, SuiteFacteur, SuiteNouveau, Arguments, AppelOuAcces, Appel, Acces ;

--inh tdsVar		: SymbolTable for Type, TypeAtomique, Parametres, Parametre, SuiteParametres, Bloc, Instructions, Instruction, Expression, SuiteExpressions, SuiteConditionnelle, Affectation, SuiteAffectation, Condition, SuiteCondition, Terme, SuiteTerme, Facteur, SuiteFacteur, SuiteNouveau, Arguments, AppelOuAcces, Appel, Acces ;

syn acces 	: DroitAcces for DroitAcces ;
syn bin_op	: BinaryOperator for Comparatif, Additif, Multiplicatif;
inh support     : Expression for Acces, Appel, AppelouAcces;
inh gauche	: Expression for SuiteCondition, SuiteAffectation, SuiteTerme, SuiteFacteur;
syn expressions : LinkedList<Expression> for Expressions, SuiteExpressions;


syn ast     : Objet for Classe, Interface;
syn ast     : LinkedList<Objet> for Interfaces,Classes;
syn ast     : Expression for Expression;
syn ast     : Type for Type, TypeAtomique, SuiteTypeAtomique, HeritageClasse, HeritageGenericite;
syn ast     : Block for Programme, Bloc, SuiteConditionnelle;
syn ast			: Instruction for Instruction;
syn ast 		: ParametreGenericite for ParametreGenericite;
syn ast     : LinkedList<ParametreGenericite> for  ParametresGenericite, Genericite, SuiteParametresGenericite;
syn ast     : LinkedList<ArgumentGenericite> for InstanceGenericite, ArgumentsGenericite, SuiteArgumentsGenericite;
syn ast     : ElementInterface for ElementInterface, Signature;
syn ast     : LinkedList<Type> for HeritageInterface, SuiteHeritageInterface;
syn ast     : LinkedList<ElementInterface> for ElementsInterface;
syn ast     : LinkedList<Parametre> for Parametres, SuiteParametres;
syn ast     : LinkedList<ElementClasse> for ElementsClasse;
syn ast     : Parametre for Parametre;
inh list    : LinkedList<Objet> for Classes, Interfaces;
inh list    : LinkedList<Instruction> for Instructions;


space separateur				is    "[\n\r\t ]+";
space commentaire				is    "\/\/.*\n";
sugar accolade_ouvrante			is    "\{";  
sugar accolade_fermante			is    "\}";  
sugar crochet_ouvrant			is    "\[";  
sugar crochet_fermant			is    "\]";  
sugar parenthese_ouvrante		is    "\(";
sugar parenthese_fermante		is    "\)";
sugar inferieur					is    "\<";  
sugar superieur					is    "\>";  
sugar inferieur_egal			is    "\<=";  
sugar superieur_egal			is    "\>=";  
sugar point						is    "\.";  
sugar point_virgule				is    ";";  
sugar virgule					is    ",";
sugar affectation				is    "=";
sugar egalite					is    "==";  
sugar different					is    "\!=";  
sugar addition					is    "\+";
sugar soustraction				is    "\-";
sugar ou						is    "\|\|";  
sugar multiplication			is    "\*";
sugar division					is    "/";
sugar modulo					is    "%";
sugar adresse					is    "&";  
sugar negation					is    "\!";  
sugar et						is    "&&";  
sugar vrai						is    "true";
sugar faux						is    "false";
sugar si						is    "if";
sugar sinon						is    "else";
sugar afficher					is    "print";  
sugar nouveau					is    "new";  
sugar tant_que					is    "while";  
sugar retour					is    "return";  
sugar type_int					is    "int";
sugar type_bool					is    "boolean";  
sugar type_char					is    "char";        
sugar type_String				is    "String";        
sugar vide						is    "void";     
sugar nul						is    "null";     
sugar choix						is    "\?";         
sugar deux_points				is    ":";          
sugar interface					is    "interface";     
sugar classe					is    "class";      
sugar extension					is    "extends";      
sugar implantation				is    "implements";      
sugar public					is    "public";    
sugar protege					is    "protected";    
sugar prive						is    "private";     
sugar statique					is    "static";       
sugar final						is    "final";       
sugar principale				is    "main";  
term   chaine					is    "\"([^\"]|\\\")*\"";  
term   caractere				is    "\'[^\']\'";  
term   entier					is    "[0-9]+";
term   identificateur			is    "[a-z_][a-zA-Z0-9_]*"; 
term   identificateur_type		is    "[A-Z][a-zA-Z0-9_]*"; 


--Programme ->#factory Interfaces #ast1 Classes #ast2 Principale #ast3;

--#factory {
--do
--  Interfaces^tds := new SymbolTable();
--  Interfaces^factory := new InterfaceFactory();
--  Interfaces^list := new LinkedList<Interface>();
--  Classes^factory := new ClassFactory();
--	Programme^tds := new SymbolTable();
--end
--}

--#ast1 {
--do
--  Classes^ast := Interfaces^ast;
--  Classes^tdsAttMet := new SymbolTable(Interface^tds);
--end
--}

--#ast2 {
--do
--  Principale^ast := Programme^ast;
--  Princiaple^tdsVar := new SymbolTable(Classes^tdsAttMet);
--end
--}

--#ast3 {
 -- do
 -- Programme^ast := Principale^ast;
 -- end
--}


Programme -> #factory Interfaces #ast3;
#factory {
do
  Interfaces^tds := new SymbolTable();
  Interfaces^factory := new InterfaceFactory();
  Interfaces^list := new LinkedList<Interface>();
  
end
}

#ast3 {
do
  Programme^ast := Interfaces^ast;
end
}

--#inh {
--do
--  BlockFactoryImpl dissociées, pb ?
--	 Interfaces^factory := new BlockFactoryImpl();
--	 Classes^factory := new BlockFactoryImpl();
--	 Principale^factory := new BlockFactoryImpl();
--	 ^tds := new SymbolTable();
--end
--}


Interfaces -> Interface Interfaces #ast;
#ast{
do
  Interfaces^list.add(Interface^ast);
  Interfaces^ast := Interfaces1^ast;
  Interfaces^tds.register(Interface^ast);
end
}


Interfaces -> #ast;
#ast {
do
  Interfaces^ast := Interfaces^list;
end
}

Interface -> interface identificateur_type Genericite HeritageInterface accolade_ouvrante ElementsInterface accolade_fermante #ast;
#ast {
do
  if (Interface^tds.knows(identificateur_type^txt)) then
    error(TYPE_already_defined, identificateur_type^txt);
  else
    if Genericite^ast = nil then
      if HeritageInterface^ast = nil then
        Interface^ast := Interface^factory.createInterface(identificateur_type^txt, ElementsInterface^ast);
      else
        Interface^ast := Interface^factory.createInterface(identificateur_type^txt,HeritageInterface^ast,ElementsInterface^ast);
      end
    else
      if HeritageInterface^ast = nil then
        Interface^ast := Interface^factory.createInterface(identificateur_type^txt,Genericite^ast,ElementsInterface^ast);
      else
        Interface^ast := Interface^factory.createInterface(identificateur_type^txt, Genericite^ast, HeritageInterface^ast, ElementsInterface^ast);
      end
    end
  end
end
}


HeritageInterface -> extension identificateur_type InstanceGenericite SuiteHeritageInterface #ast ;
#ast{
local
  o : Optional<Declaration>;
  d : Declaration;
do
  if HeritageInterface^tds.knows(identificateur_type^txt) then
    o := HeritageInterface^tds.get(identificateur_type^txt);
    d := o.get();
    match d
    with Interface then
      if InstanceGenericite^ast = nil then
        SuiteHeritageInterface^ast.add(HeritageInterface^factory.createGenericType(d));
      else
        SuiteHeritageInterface^ast.add(HeritageInterface^factory.createGenericType(d,InstanceGenericite^ast));
      HeritageInterface^ast := SuiteHeritageInterface^ast;
      end
    else
      error(TYPE_not_an_interface, identificateur_type^txt);
    end
  else
    error(TYPE_unknown,identificateur_type^txt);
  end
end
}

HeritageInterface -> #ast;
#ast{
do
  HeritageInterface^ast := nil;
end
}


SuiteHeritageInterface -> virgule identificateur_type InstanceGenericite SuiteHeritageInterface #ast;
#ast{
local
  o : Optional<Declaration>;
  d : Declaration;
do
  if SuiteHeritageInterface^tds.knows(identificateur_type^txt) then
    if SuiteHeritageInterface^tds.contains(identificateur_type^txt) then
      error(HERITAGE_already_defined,identificateur_type^txt);
    else
      o := SuiteHeritageInterface^tds.get(identificateur_type^txt);
      d := o.get();
      match d
      with Interface then
        if InstanceGenericite^ast = nil then
          SuiteHeritageInterface1^ast.add(SuiteHeritageInterface^factory.createGenericType(d));
        else
          SuiteHeritageInterface1^ast.add(SuiteHeritageInterface^factory.createGenericType(d,InstanceGenericite^ast));
        end
      else
        error(TYPE_not_an_interface,identificateur_type^txt);
      end
    end
    SuiteHeritageInterface^ast := SuiteHeritageInterface1^ast;  --Hh
  else
    error(TYPE_unknown,identificateur_type^txt);
  end
end
}


SuiteHeritageInterface -> #ast;
#ast{
do
  SuiteHeritageInterface^ast := new LinkedList<Type>();
end
}


ElementsInterface -> ElementInterface ElementsInterface #ast;
#ast{
do
  ElementsInterface1^ast.addFirst(ElementInterface^ast);
  ElementsInterface^ast := ElementsInterface1^ast;
end
}

ElementsInterface -> #ast;
#ast{
do
  ElementsInterface^ast := new LinkedList<ElementInterface>();
end
}


ElementInterface -> final statique Type identificateur affectation Expression point_virgule #ast;
#ast{
do
-- final static équivalent à une constante ?? Comment le mettre dans la bonne tds ??
  ElementInterface^ast := ElementInterface^factory.createFinalStaticField(identificateur^txt,Type^ast, Expression^ast);
end
}

ElementInterface -> Signature point_virgule #ast;
#ast{
do
  ElementInterface^ast := Signature^ast;
end
}


Signature -> vide identificateur parenthese_ouvrante Parametres parenthese_fermante #ast;
#ast{
do
  Signature^ast := Signature^factory.createSignature(identificateur^txt,Parametres^ast);
end
}  
 
Signature -> Type identificateur parenthese_ouvrante Parametres parenthese_fermante #ast;
#ast{
do
  Signature^ast := Signature^factory.createSignature(identificateur^txt,Type^ast,Parametres^ast);
end
}  


Classes -> Classe #list Classes #ast;
#ast {
do
	Classes^ast := Classes1^ast;
end
}

#list {
do
  Classes^list.add(Classe^ast);
  Classes^tds.register(Classe^ast);
end
}

Classes -> #ast;
#ast {
do
	Classes^ast := Classes^list;
end
}

Classe -> classe  identificateur_type Genericite HeritageClasse ImplantationInterface accolade_ouvrante ElementsClasse accolade_fermante #ast;
#ast {
do
  if (Classe^tds.knows(identificateur_type^txt)) then
    error(TYPE_already_defined, identificateur_type^txt);
  else
    if Genericite^ast = nil then
      if HeritageClasse^ast = nil then
        Classe^ast := Classe^factory.createClasse(identificateur_type^txt, ElementsClasse^ast);
      else
        Classe^ast := Classe^factory.createClasse(identificateur_type^txt,HeritageClasse^ast,ElementsClasse^ast);
      end
    else
      if HeritageClasse^ast = nil then
        Classe^ast := Classe^factory.createClasse(identificateur_type^txt,Genericite^ast,ElementsClasse^ast);
      else
        Classe^ast := Classe^factory.createClasse(identificateur_type^txt, Genericite^ast, HeritageClasse^ast, ElementsClasse^ast);
      end
    end
  end
end
}

HeritageClasse -> extension identificateur_type #inh InstanceGenericite #ast ;
#inh {
local
  f : Optional<Declaration>;
  d : Declaration;
do
  if HeritageClasse^tds.knows(identificateur_type^txt) then
    f := HeritageClasse^tds.get(identificateur_type^txt);
    d = f.get();
    match d
    with GenericType then InstanceGenericite^support := HeritageClasse^factory.createGenericTypeUse(d);
    end
  else
    error(TYPE_unknown,identificateur_type^txt);
  end
end
}

#ast {
do
  HeritageClasse^ast := InstanceGenericite^ast;
end
}
HeritageClasse -> #ast;
#ast {
do
  HeritageClasse^ast := nil;
end
}

ImplantationInterface -> implantation identificateur_type InstanceGenericite SuiteHeritageInterface ;

ImplantationInterface -> ;


Principale -> public classe identificateur_type accolade_ouvrante MethodePrincipale accolade_fermante #ast;
#ast {
do
   if (Principale^tds.knows(identificateur_type^txt)) then
      error(TYPE_already_defined, identificateur_type^txt);
   else
      Principale^ast := Principale^factory.createPrincipale(identificateur_type^txt,MethodePrincipale^ast);
   end
end
}


MethodePrincipale -> public statique vide principale parenthese_ouvrante type_String crochet_ouvrant crochet_fermant identificateur parenthese_fermante Bloc #ast;
#ast {
do
   MethodePrincipale^ast := MethodePrincipale^factory.createMethodePrincipale(identificateur^txt,Bloc^ast);
end
}


Genericite -> inferieur ParametresGenericite superieur #ast ;
#ast {
do
   Genericite^ast := ParametresGenericite^ast;
end
}

Genericite -> #ast;
#ast {
do
  Genericite^ast := nil;
end
}

ParametresGenericite -> ParametreGenericite SuiteParametresGenericite #ast;
#ast {
do
  SuiteParametresGenericite^ast.addFirst(ParametreGenericite^ast);
  ParametresGenericite^ast := SuiteParametresGenericite^ast;
  ParametreGenericite^tds.register(ParametreGenericite^ast);

end
}


SuiteParametresGenericite -> virgule ParametreGenericite SuiteParametresGenericite #ast;
#ast {
do
  SuiteParametresGenericite1^ast.addFirst(ParametreGenericite^ast);
  SuiteParametresGenericite^ast := SuiteParametresGenericite1^ast;
  SuiteParametresGenericite^tds.register(ParametreGenericite^ast);
end
}
SuiteParametresGenericite -> #ast;
#ast {
do
   SuiteParametresGenericite^ast := SuiteParametresGenericite^gauche;
end
}


ParametreGenericite -> identificateur_type HeritageGenericite #ast ; 
#ast {
do
  if ParametreGenericite^tds.contains(identificateur_type^txt) then
    error(GENERICITE_already_defined, identificateur_type^txt);
  else
    ParametreGenericite^ast := ParametreGenericite^factory.createGenericParameter(identificateur_type^txt, HeritageGenericite^ast);
  end
end
} 
 
ParametreGenericite -> choix HeritageGenericite #ast ;  
#ast {
do
  ParametreGenericite^ast := ParametreGenericite^factory.createGenericParameter(HeritageGenericite^ast);
end
}
 

HeritageGenericite -> extension identificateur_type SuiteHeritageGenericite ;

HeritageGenericite -> ;

SuiteHeritageGenericite -> adresse identificateur_type SuiteHeritageGenericite ;

SuiteHeritageGenericite -> ;


InstanceGenericite -> ;

InstanceGenericite -> inferieur ArgumentsGenericite superieur ;


ArgumentsGenericite -> ArgumentGenericite SuiteArgumentsGenericite ;


SuiteArgumentsGenericite -> virgule ArgumentGenericite SuiteArgumentsGenericite ;

SuiteArgumentsGenericite -> #ast;
#ast {
do
   SuiteArgumentsGenericite^ast := SuiteArgumentsGenericite^gauche;
end
}



ArgumentGenericite -> identificateur_type InstanceGenericite ;

ArgumentGenericite -> type_String ;


ElementsClasse -> DroitAcces ElementClasse ElementsClasse ;
  
ElementsClasse -> #ast ;
#ast {
do
   ElementsClasse^ast := new LinkedList<ElementClasse>();
end
}

 

DroitAcces -> public #ast ;
#ast {
do
   DroitAcces^acces := DroitAcces.Public;
end
}

 
DroitAcces -> protege #ast ;
#ast {
do
   DroitAcces^acces := DroitAcces.Protected;
end
}
 
DroitAcces -> prive #ast ;  
#ast {
do
   DroitAcces^acces := DroitAcces.Private;
end
}
 

ElementClasse -> statique AttributOuMethode ;  
 
ElementClasse -> AttributOuMethode ;
 
ElementClasse -> Constructeur ;  
   

AttributOuMethode -> Type identificateur SuiteAttributOuMethode;

AttributOuMethode -> vide identificateur parenthese_ouvrante Parametres parenthese_fermante Bloc ;


SuiteAttributOuMethode -> point_virgule ;

SuiteAttributOuMethode -> parenthese_ouvrante Parametres parenthese_fermante Bloc ;


Constructeur -> identificateur_type parenthese_ouvrante Parametres parenthese_fermante Bloc ;
 






-- Lien entre parametres et suite de parametres ???

Parametres -> #ast ;
#ast {
do
   Parametres^ast := new LinkedList<Parametre>();
end
}

Parametres -> Parametre SuiteParametres #ast ;
#ast {
do 
   Parametres^ast.addFirst(Parametre^ast);
   Parametres^ast := SuiteParametres;  
end 
}

-- TODO
Parametre -> Type identificateur ;

SuiteParametres -> #ast;
#ast {
do
   SuiteParametres^ast := new LinkedList<Parametres>();
end
}

SuiteParametres -> virgule Parametre SuiteParametres #ast;
#ast {
do
	SuiteParametres1^ast.addFirst(Parametre^ast); 
   SuiteParametres^ast := SuiteParametres1^ast; 
end
}

Bloc -> accolade_ouvrante Instructions accolade_fermante #ast;
#ast {
do
 Bloc^ast := Bloc^factory.createBlock(Instructions^ast);
end
}

Type -> TypeAtomique SuiteTypeAtomique ;


TypeAtomique -> type_bool #ast ;
#ast {
do
   TypeAtomique^ast := TypeAtomique^factory.createBooleanType();  
end
}

TypeAtomique -> type_int  #ast ;
#ast {
do
   TypeAtomique^ast := TypeAtomique^factory.createIntegerType();  
end
}
 
TypeAtomique -> type_char #ast ;
#ast {
do
   TypeAtomique^ast := TypeAtomique^factory.createCharType();  
end
}

TypeAtomique -> type_String #ast ;
#ast {
do
   TypeAtomique^ast := TypeAtomique^factory.createStringType();  
end
}
 
TypeAtomique -> identificateur_type InstanceGenericite ; 


SuiteTypeAtomique -> crochet_ouvrant crochet_fermant SuiteTypeAtomique ;

SuiteTypeAtomique -> ;


Instructions -> #ast;
#ast {
do
   Instructions^list := new LinkedList<Instruction>();
end
}

Instructions -> Instruction Instructions #ast ;
#ast {
do
    Instructions1^list.addFirst(Instruction^ast);
    Instructions^list := Instructions1^list;
end
}


Instruction -> Type identificateur affectation Expression point_virgule ;


Instruction -> Expression point_virgule ;



Instruction -> si parenthese_ouvrante Expression parenthese_fermante Bloc SuiteConditionnelle ;


SuiteConditionnelle -> #ast;
#ast {
do
    SuiteConditionnelle^ast := SuiteConditionnelle^factory.createConditional(SuiteConditionnelle^condition, SuiteConditionnelle^alors);
end
}

SuiteConditionnelle ->sinon #inh Bloc #ast;
#inh {
do
        Bloc^tds := new SymbolTable(SuiteConditionnelle^tds);   
end
}
#ast {
do
    SuiteConditionnelle^ast := SuiteConditionnelle^factory.createConditional(SuiteConditionnelle^condition, SuiteConditionnelle^alors,Bloc^ast);
end
}

Instruction -> tant_que parenthese_ouvrante Expression parenthese_fermante #inh Bloc #ast ;
#inh {
do
   Bloc^tds := new SymbolTable(Instruction^tds);
end
}

Instruction -> afficher Expression point_virgule #ast ;
#ast {
do
   Instruction^ast := Instruction^factory.createPrinter(Expression^ast);
end
}

Instruction -> retour Expression point_virgule #ast ;
#ast {
do
   Instruction^ast := Instruction^factory.createReturn(Expression^ast);
end
}


Expression -> Affectation #inh SuiteAffectation #ast;
#inh {
do
   SuiteAffectation^gauche := Affectation^ast ;
end 
}
#ast {
do
    Expression^ast := SuiteAffectation^ast;
end 
}

Affectation -> Condition #inh SuiteCondition #ast;
#inh {
do
   SuiteCondition^gauche := Condition^ast ;
end 
}
#ast {
do
    Affectation^ast := SuiteCondition^ast;
end 
}

--TODO
SuiteAffectation -> affectation Expression ;

--TODO
SuiteAffectation -> ;

SuiteCondition -> Comparatif Condition #ast ;
#ast {
do
	SuiteCondition^ast :=
	SuiteCondition^factory.createBinaryExpression(
	SuiteCondition^gauche,
	Comparatif^bin_op,
	Condition^ast);
end 
}

SuiteCondition -> #ast ;
#ast {
do
   SuiteCondition^ast := SuiteCondition^gauche;
end 
}

Comparatif -> egalite #texte;  
#texte {  
do  
   Comparatif^bin_op := BinaryOperator.Equal;   
end  
}

Comparatif -> different #texte;  
#texte {  
do  
   Comparatif^bin_op := BinaryOperator.Different;   
end  
}
  
Comparatif -> inferieur #texte;  
#texte {  
do  
   Comparatif^bin_op := BinaryOperator.Lesser;   
end  
}
  
Comparatif -> inferieur_egal #texte;  
#texte {  
do  
   Comparatif^bin_op := BinaryOperator.LesserOrEqual;   
end  
}
  
Comparatif -> superieur #texte;  
#texte {   
do  
   Comparatif^bin_op := BinaryOperator.Greater;    
end  
}
   
Comparatif -> superieur_egal #texte;  
#texte {   
do  
   Comparatif^bin_op := BinaryOperator.GreaterOrEqual;    
end  
}
   
Condition -> Terme #ast_inh SuiteTerme #ast_syn ;
#ast_inh {
do 
   SuiteTerme^gauche := Terme^ast; 
end 
}

#ast_syn {
do
   Condition^ast := SuiteTerme^ast; 
end
}

SuiteTerme -> Additif Terme #ast_inh SuiteTerme #ast_syn ;  
#ast_inh {
do
   SuiteTerme1^gauche := SuiteTerme^factory.createBinaryExpression(
      SuiteTerme^gauche,  
      Additif^bin_op,  
      Terme^ast);  
end 
}

#ast_syn {
do 
   SuiteTerme^ast := SuiteTerme1^ast; 
end 
}

SuiteTerme -> #ast ;
#ast {
do
   SuiteTerme^ast := SuiteTerme^gauche;
end
}


Additif -> soustraction #ast;  
#ast {  
do  
   Additif^bin_op := BinaryOperator.Substract;   
end  
}
   
Additif -> ou #ast;  
#ast {  
do  
   Additif^bin_op := BinaryOperator.Or;   
end  
}

Additif -> addition #ast;  
#ast {  
do  
   Additif^bin_op := BinaryOperator.Addition;   
end  
}

Terme -> Facteur #ast_inh SuiteFacteur #ast_syn ;
#ast_inh {
do 
   SuiteFacteur^gauche := Facteur^ast; 
end 
}

#ast_syn {
do
   Terme^ast := SuiteFacteur^ast; 
end
}

SuiteFacteur -> Multiplicatif Facteur #ast_inh SuiteFacteur #ast_syn ;  
#ast_inh {
do 
   SuiteFacteur1^gauche := SuiteFacteur^factory.createBinaryExpression(
      SuiteFacteur^gauche,  
      Multiplicatif^bin_op,  
      Facteur^ast);  
end 
}

#ast_syn {
do 
   SuiteFacteur^ast := SuiteFacteur1^ast; 
end 
}
 
SuiteFacteur -> #ast;  
#ast {
do
   SuiteFacteur^ast := SuiteFacteur^gauche;
end
}

Multiplicatif -> multiplication #ast; 
#ast { 
do 
   Multiplicatif^bin_op := BinaryOperator.Multiple;  
end 
}

Multiplicatif -> division #ast; 
#ast { 
do 
   Multiplicatif^bin_op := BinaryOperator.Divide;  
end 
}
 
Multiplicatif -> modulo #ast; 
#ast {  
do 
   Multiplicatif^bin_op := BinaryOperator.Modulo;   
end 
}
  
Multiplicatif -> et #ast; 
#ast {  
do 
   Multiplicatif^bin_op := BinaryOperator.And;   
end 
}
  
Facteur -> accolade_ouvrante Expressions accolade_fermante #ast ;
#ast {
do
   Facteur^ast := Facteur^factory.createSequence( Expressions^expressions );
end
}

Expressions -> Expression SuiteExpressions #ast ;
#ast {
do 
   SuiteExpressions^expressions.addFirst(Expression^ast); 
   Expressions^expressions := SuiteExpressions^expressions; 
end 
}

SuiteExpressions -> virgule Expression SuiteExpressions #ast ;
#ast {
do 
   SuiteExpressions1^expressions.addFirst(Expression^ast); 
   SuiteExpressions^expressions := SuiteExpressions1^expressions; 
end 
}

SuiteExpressions -> #ast ;
#ast {
do
   SuiteExpressions^expressions := new LinkedList<Expression>();
end
}

Facteur -> soustraction Facteur #ast ;  
#ast { 
do  
   Facteur^ast := Facteur ^factory.createUnaryExpression(UnaryOperator.Opposite,Facteur1^ast);  
end  
}
 
Facteur -> negation Facteur #ast ;  
#ast { 
do  
   Facteur^ast := Facteur ^factory. createUnaryExpression(UnaryOperator.Negate,Facteur1^ast);  
end  
}

Facteur -> nouveau Type #inh SuiteNouveau #ast ; 
#inh {
do 
   SuiteNouveau^type := Type^ast; 
end 
}
#ast {
do 
   Facteur^ast := SuiteNouveau^ast; 
end 
}

SuiteNouveau -> crochet_ouvrant Expression crochet_fermant #ast ; 
#ast {
do  
   SuiteNouveau^ast := SuiteNouveau^factory.createArrayAllocation(SuiteNouveau^type,Expression^ast);  
end  
}

SuiteNouveau -> #ast ; 
#ast {
do 
   SuiteNouveau^ast := SuiteNouveau^factory.createPointerAllocation(SuiteNouveau^type); 
end 
}

-- TODO
Arguments -> parenthese_ouvrante parenthese_fermante ;

-- TODO
Arguments -> parenthese_ouvrante Expressions parenthese_fermante ;


Facteur -> Valeur #ast;
#ast {
do
   Facteur^ast := Valeur^ast;
end
}
 
Valeur -> entier #ast;
#ast {
do
    Valeur^ast := Valeur^factory.createIntegerValue(entier^txt); 
end
}

Valeur -> vrai #ast;
#ast {
do
    Valeur^ast := Valeur^factory.createBooleanValue(true);  
end
}

Valeur -> faux #ast;
#ast {
do
    Valeur^ast := Valeur^factory.createBooleanValue(false);  
end
}

Valeur -> chaine #ast;
#ast {
do
    Valeur^ast := Valeur^factory.createStringValue(chaine^txt);  
end
}

Valeur -> caractere #ast;
#ast {
do
    Valeur^ast := Valeur^factory.createCharacterValue(caractere^txt);  
end
}

Facteur -> identificateur #inh AppelouAcces #ast ;
#inh {
local
   f : Optional<Declaration>;
   d : Declaration;
do
   if (Facteur^tds.knows(identificateur^txt)) then
      f := Facteur^tds.get(identificateur^txt);
      d := f.get();
      match d
      with ConstantDeclaration then AppelouAcces^support := d.getValue();
      with VariableDeclaration then AppelouAcces^support := Facteur^factory.createVariableUse(d);
      end
   else
      error(BLOC_undefined_ident, identificateur^txt);
   end
end
}

-- TODO
Facteur -> identificateur_type point identificateur AppelOuAcces ;

Facteur -> parenthese_ouvrante Expression parenthese_fermante #ast;
#ast {
do
   Facteur^ast := Facteur^factory.createSequence( Expression^expressions );
end
}

-- TODO
AppelOuAcces -> Acces ;

-- TODO
AppelOuAcces -> Appel ;


Acces -> #ast ;
#ast { 
do  
   Acces^ast := Acces^support;  
end  
}

-- TODO
Acces -> crochet_ouvrant Expression crochet_fermant Acces ;

Acces -> point identificateur #inh Acces #ast;
#inh {
do
   Acces1^support := Acces^factory.createFieldAccess(Acces^support,identificateur^txt);
end
}
#ast { 
do  
   Acces^ast := Acces1^ast;  
end  
}

-- TODO
Appel -> Arguments Acces ;  
 
end
